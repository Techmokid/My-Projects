/**
 @file FaBoOLED_EROLED096.cpp
 @brief This is a library for the FaBo OLED I2C Brick.

   http://fabo.io/214.html

   Released under APACHE LICENSE, VERSION 2.0

   http://www.apache.org/licenses/

 @author FaBo<info@fabo.io>
*/

#include "FaBoOLED_EROLED096.h"

/**
 @brief Constructor
*/
FaBoOLED_EROLED096::FaBoOLED_EROLED096(uint8_t addr) {
  _i2caddr = addr;
  _cur_x = 120;
  _cur_y = 7;
  Wire.begin();
}

/**
 @brief Initialize
*/
void FaBoOLED_EROLED096::init() {
  // Initializing
  setCommand(0xAE); // set display off
  setCommand(0xD5); // set display clock divide ratio/oscillator frequency
  setCommand(0x80); //
  setCommand(0xA8); // set multiplex ratio
  setCommand(0x3F); //
  setCommand(0xD3); // set display offset
  setCommand(0x00); //
  setCommand(0x40); // set display start line
  setCommand(0x8D); // set charge pump
  setCommand(0x14); // generated by internal DC/DC circuit
  setCommand(0xA1); // set segment re-map
  setCommand(0xC8); // set com output scan direction
  setCommand(0xDA); // set com pins hardware configuration
  setCommand(0x12); //
  setCommand(0x81); // set contrast control
  setCommand(0xCF); //
  setCommand(0xD9); // set pre-charge period
  setCommand(0xF1); //
  setCommand(0xDB); // set VCOMH deselect level
  setCommand(0x20); //
  setCommand(0xA4); // set entire display on/off
  setCommand(0xA6); // set normal/inverse display
  // clear screen
  setCommand(0xAF); // set display on
}

/**
 @brief Begin Device
*/
void FaBoOLED_EROLED096::begin() {
  init();
  clear();
}

/**
 @brief Show Bitmap
*/
void FaBoOLED_EROLED096::showBitmap() {
  uint8_t i,j;
  for(i=0; i<8; i++){ // row/height/page
    setAddress(i,0,127);
    for(j=0; j<128; j++){ // column
      writeData( pgm_read_byte( BITMAP+(i*128)+j ) );
    }
  }
}

/**
 @brief Clear Screen
*/
void FaBoOLED_EROLED096::clear(void) {
  uint8_t i,j;
  for(i=0; i<8; i++){ // row/height/page
    setAddress(i,0,127);
    for(j=0; j<128; j++){ // column
      writeData( 0x00 ); // clear
    }
  }
  home();
}

/**
 @brief Set Cursor to Home
*/
void FaBoOLED_EROLED096::home(void) {
  _cur_x = 120;
  _cur_y = 7;
}

/**
 @brief Set Cursor
*/
void FaBoOLED_EROLED096::setCursor(uint8_t col, uint8_t row) {
  uint8_t map_x[]={120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,0};
  uint8_t map_y[]={7,6,5,4,3,2,1,0};
  if ( (col >= 0) && (col <= 15) ) {
    _cur_x = map_x[col];
  }
  if ( (row >= 0) && (row <= 7) ) {
    _cur_y = map_y[row];
  }
}

/**
 @brief Set Command
*/
void FaBoOLED_EROLED096::setCommand(uint8_t value) {
  send(value, (uint8_t)0x00);
}

/**
 @brief Set Address
*/
void FaBoOLED_EROLED096::setAddress(uint8_t row, uint8_t col_s, uint8_t col_e) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(0x00); // command
  Wire.write(0xB0 | row); // set page start address (for page addressing mode)
  Wire.write(0x21); // set column address
  Wire.write(col_s); // column start address: 0-
  Wire.write(col_e); // column end   address: -127
  Wire.endTransmission();
}

/**
 @brief Write Display Data
*/
void FaBoOLED_EROLED096::writeData(uint8_t value) {
  send(value, (uint8_t)0x40);
}

/**
 @brief Write character
*/
size_t FaBoOLED_EROLED096::write(uint8_t value) {
  uint8_t i;
  if ( value>=0x20 && value<=0x80 ) {
    _cur_x -= 8;
    if ( _cur_x >= 0 ) {
      setAddress(_cur_y, _cur_x+8, _cur_x+8+8-1);
      writeData( 0x00 );
      writeData( 0x00 );
      for ( i=0; i<5; i++ ) {
        writeData( pgm_read_byte(FONT+(value*5)+i) );
      }
      writeData( 0x00 );
    } else {
      _cur_x = 0;
    }
  }
  return 1;
}

/**
 @brief Send I2C Data
*/
void FaBoOLED_EROLED096::send(uint8_t value, uint8_t mode) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(mode); // control byte: Data/Command
  Wire.write(value);
  Wire.endTransmission();
}
